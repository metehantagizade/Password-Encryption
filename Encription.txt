        using System.Security.Cryptography;
		
		
		public static byte[] GenerateRandomSalt()
        {
            byte[] salt = new byte[16];
            new RNGCryptoServiceProvider().GetBytes(salt);
            return salt;    
        }
		public static string GeneratePasswordWithSalt(string password , byte[] salt)
        {
            var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 10000);
            byte[] hash = pbkdf2.GetBytes(20);
            byte[] hashBytes = new byte[36];
            Array.Copy(salt, 0, hashBytes, 0, 16);
            Array.Copy(hash, 0, hashBytes, 16, 20);
            string savedPasswordHash = Convert.ToBase64String(hashBytes);
            return savedPasswordHash;
        }
		public static string ResetPassword(string email, string password_hash, string randomSalt)
		{
			//Save password_hash and randomSalt on db
		}
		
		public JsonResult Register(string _userEmail , string _password)
		{
			byte[] randomSalt = GenerateRandomSalt();
			string password_hash = GeneratePasswordWithSalt(_password, randomSalt);
			_userRepository.ResetPassword(account.EMAIL,  password_hash, Convert.ToBase64String(randomSalt));
		}